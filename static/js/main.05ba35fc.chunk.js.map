{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","photo.png","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","TokenArt","networks","tokenArt","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","loading","filterNames","searchValue","this","console","log","filter","x","student","includes","constructor","props","super","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","uploadImage","add","error","hash","send","from","on","reload","getValueInput","value","last","userSearchFilter","userSearchFilterLast","length","bind","id","className","Navbar","rel","src","photo","width","height","alt","Identicon","toString","module","exports","Main","role","style","maxWidth","onSubmit","studentWallet","type","accept","onChange","ref","input","placeholder","required","map","key","href","author"],"mappings":"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","file":"static/js/main.05ba35fc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import TokenArt from '../abis/TokenArt.json'\r\nimport React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = TokenArt.networks[networkId]\r\n    if(networkData) {\r\n      const tokenArt = new web3.eth.Contract(TokenArt.abi, networkData.address)\r\n      this.setState({ tokenArt })\r\n      const imagesCount = await tokenArt.methods.imageCount().call()\r\n      this.setState({ imagesCount })\r\n      // Load images\r\n      for (var i = 1; i <= imagesCount; i++) {\r\n        const image = await tokenArt.methods.images(i).call()\r\n        this.setState({\r\n          images: [...this.state.images, image]\r\n        })\r\n      }\r\n\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('TokenArt contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  captureFile = event => {\r\n\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    const reader = new window.FileReader()\r\n    reader.readAsArrayBuffer(file)\r\n\r\n    reader.onloadend = () => {\r\n         this.setState({ buffer: Buffer(reader.result) })\r\n    console.log('buffer', this.state.buffer)  }\r\n  }\r\n\r\n  uploadImage = student => {\r\n    console.log(\"Submitting file to ipfs...\")\r\n\r\n    //adding file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('Ipfs result', result)\r\n      if(error) {\r\n        console.error(error)\r\n        return\r\n      }\r\n\r\n      this.setState({ loading: true })\r\n      this.state.tokenArt.methods.uploadImage(result[0].hash, student).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n      this.setState({ loading: false })\r\n      // refresh \r\n      window.location.reload(false);\r\n      })\r\n    })\r\n  }\r\n\r\n  getValueInput = event => {\r\n      event.preventDefault()\r\n      const searchValue = event.target.value\r\n      const last = this.state.userSearchFilter\r\n\r\n      this.setState({ userSearchFilterLast: this.state.userSearchFilter })\r\n      this.setState({ userSearchFilter: searchValue })\r\n\r\n      console.log(\"in getValueInput, last value =  \",  last)\r\n      this.filterNames(searchValue)\r\n\r\n      this.setState({ userSearchFilterLast: searchValue })\r\n      if (searchValue == \"\" || last.length > searchValue.length)\r\n        window.location.reload(false);\r\n  }\r\n\r\n  filterNames (searchValue) {\r\n      const { images } = this.state\r\n      console.log(\"in filterNames searchValue = \", searchValue)\r\n      this.setState({\r\n        images: images.filter(x => x.student.includes(searchValue))\r\n      })\r\n\r\n  }\r\n\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      tokenArt: null,\r\n      images: [],\r\n      userSearchFilter: \"\",\r\n      userSearchFilterLast: \"\",\r\n      loading: true\r\n    }\r\n\r\n    this.uploadImage = this.uploadImage.bind(this)\r\n    this.captureFile = this.captureFile.bind(this)\r\n    this.filterNames = this.filterNames.bind(this);\r\n    this.getValueInput = this.getValueInput.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              images={this.state.images}\r\n              captureFile={this.captureFile}\r\n              uploadImage={this.uploadImage}\r\n              filterNames={this.filterNames}\r\n              getValueInput={this.getValueInput}\r\n            />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport photo from '../photo.png'\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={photo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\r\n          &nbsp; TokenArt\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\">{this.props.account}</small>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                className='ml-2'\r\n                width='30'\r\n                height='30'\r\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n              />\r\n              : <span></span>\r\n            }\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","module.exports = __webpack_public_path__ + \"static/media/photo.23bc952e.png\";","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\r\n            <div className=\"content mr-auto ml-auto\">\r\n              <p>&nbsp;</p>\r\n\r\n              <h2>Post a Certification</h2>\r\n              <form onSubmit={(event) => {\r\n                event.preventDefault()\r\n                const student = this.studentWallet.value\r\n                this.props.uploadImage(student)\r\n              }} >\r\n                <input type='file' accept=\".jpg, .jpeg, .png, .bmp, .gif\" onChange={this.props.captureFile} />\r\n                  <div className=\"form-group mr-sm-2\">\r\n                    <br></br>\r\n                      <input\r\n                        id=\"studentWallet\"\r\n                        type=\"text\"\r\n                        ref={(input) => { this.studentWallet = input }}\r\n                        className=\"form-control\"\r\n                        placeholder=\"Wallet Address to Award Certificate to ...\"\r\n                        required />\r\n                  </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">Upload</button>\r\n              </form>\r\n\r\n\r\n              <p>&nbsp;</p>\r\n              <p>&nbsp;</p>\r\n              <label>Search by Owner: </label>\r\n              <input\r\n                  type=\"submit\"\r\n                  id=\"SearchOwner\"\r\n                  type=\"text\"\r\n                  ref={(input) => { this.userSearchFilter = input }}\r\n                  className=\"form-control\"\r\n                  placeholder=\"0xC60124F569A7F59C852f82E5bC13a508e4513Be1 ...\"\r\n                  onChange={ this.props.getValueInput } />\r\n\r\n              <p>&nbsp;</p>\r\n\r\n\r\n\r\n\r\n              { this.props.images.map((image, key) => {\r\n                return(\r\n\r\n                <div className=\"card mb-4\" key={key} >\r\n                    <div className=\"card-header\">\r\n                      <img\r\n                        className='mr-2'\r\n                        width='30'\r\n                        height='30'\r\n                        src={`data:image/png;base64,${new Identicon(image.student, 30).toString()}`}\r\n                      />\r\n                      <small className=\"text-muted\">{image.student}</small>\r\n                    </div>\r\n\r\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p className=\"text-center\">\r\n                            <img  src={`https://ipfs.infura.io/ipfs/${image.hash}`} width=\"45%\"   />\r\n                        </p>\r\n                        <a\r\n                        href={`https://ipfs.infura.io/ipfs/${image.hash}`}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">\r\n                             <small className=\"text-muted\">Issued by: {image.author}</small>\r\n                        </a>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })}\r\n\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"],"sourceRoot":""}